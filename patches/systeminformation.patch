diff --git a/lib/cpu.js b/lib/cpu.js
index ef8d7b743f826a3cc2e3a6ae5a2f8ff90e894ed3..4b0820ec9d546bb7a8fb6ba2b8f4d7a01598a999 100644
--- a/lib/cpu.js
+++ b/lib/cpu.js
@@ -635,7 +635,11 @@ function cpuBrandManufacturer(res) {
   res.manufacturer = cpuManufacturer(res.brand);
 
   let parts = res.brand.split(' ');
-  parts.shift();
+
+  if (!/^\d+th$/.test(parts[0]) && !parts.includes('Intel')) {
+    parts.shift();
+  }
+
   res.brand = parts.join(' ');
   return res;
 }
diff --git a/lib/filesystem.js b/lib/filesystem.js
index cbc90c94675b46d9e48e6984409bfed6cea9b3f8..12a6598457780fa1be32b5e6be123c5571172bbf 100644
--- a/lib/filesystem.js
+++ b/lib/filesystem.js
@@ -1431,6 +1431,7 @@ function diskLayout(callback) {
           const workload = [];
           workload.push(util.powerShell('Get-CimInstance Win32_DiskDrive | select Caption,Size,Status,PNPDeviceId,DeviceId,BytesPerSector,TotalCylinders,TotalHeads,TotalSectors,TotalTracks,TracksPerCylinder,SectorsPerTrack,FirmwareRevision,SerialNumber,InterfaceType | fl'));
           workload.push(util.powerShell('Get-PhysicalDisk | select BusType,MediaType,FriendlyName,Model,SerialNumber,Size | fl'));
+          workload.push(util.powerShell(`Get-Disk -Number (Get-Partition -DriveLetter ($env:SystemDrive -replace ':', '')).DiskNumber | ConvertTo-Json -Depth 1`));
           if (util.smartMonToolsInstalled()) {
             try {
               const smartDev = JSON.parse(execSync('smartctl --scan -j').toString());
@@ -1446,6 +1447,7 @@ function diskLayout(callback) {
           util.promiseAll(
             workload
           ).then((data) => {
+            const primaryDevice = JSON.parse(data.results[2]);
             let devices = data.results[0].toString().split(/\n\s*\n/);
             devices.forEach(function (device) {
               let lines = device.split('\r\n');
@@ -1453,11 +1455,13 @@ function diskLayout(callback) {
               const status = util.getValue(lines, 'Status', ':').trim().toLowerCase();
               if (size) {
                 result.push({
+                  primary: false,
                   device: util.getValue(lines, 'DeviceId', ':'),  // changed from PNPDeviceId to DeviceID (be be able to match devices)
                   type: device.indexOf('SSD') > -1 ? 'SSD' : 'HD',  // just a starting point ... better: MSFT_PhysicalDisk - Media Type ... see below
                   name: util.getValue(lines, 'Caption', ':'),
                   vendor: getVendorFromModel(util.getValue(lines, 'Caption', ':', true).trim()),
                   size: parseInt(size),
+                  PNPDeviceId: util.getValue(lines, 'PNPDeviceId', ':'),
                   bytesPerSector: parseInt(util.getValue(lines, 'BytesPerSector', ':')),
                   totalCylinders: parseInt(util.getValue(lines, 'TotalCylinders', ':')),
                   totalHeads: parseInt(util.getValue(lines, 'TotalHeads', ':')),
@@ -1497,6 +1501,14 @@ function diskLayout(callback) {
                 }
               }
             });
+            result = result.map(r => {
+              const path = primaryDevice.Path.toLowerCase().replaceAll('#', '\\');
+              const pnpId = r.PNPDeviceId.toLowerCase();
+              return {
+                ...r,
+                primary: path.includes(pnpId)
+              }
+            });
             // S.M.A.R.T
             data.results.shift();
             data.results.shift();
diff --git a/lib/graphics.js b/lib/graphics.js
index 6833bdc9d9b17e42c764026ee5aa601c663204f8..58f863c81c443a86736418dc0b9128a529dd39b3 100644
--- a/lib/graphics.js
+++ b/lib/graphics.js
@@ -839,7 +839,7 @@ function graphics(callback) {
           workload.push(util.powerShell('Get-CimInstance -Namespace root\\wmi -ClassName WmiMonitorBasicDisplayParams | fl'));
           workload.push(util.powerShell('Add-Type -AssemblyName System.Windows.Forms; [System.Windows.Forms.Screen]::AllScreens'));
           workload.push(util.powerShell('Get-CimInstance -Namespace root\\wmi -ClassName WmiMonitorConnectionParams | fl'));
-          workload.push(util.powerShell('gwmi WmiMonitorID -Namespace root\\wmi | ForEach-Object {(($_.ManufacturerName -notmatch 0 | foreach {[char]$_}) -join "") + "|" + (($_.ProductCodeID -notmatch 0 | foreach {[char]$_}) -join "") + "|" + (($_.UserFriendlyName -notmatch 0 | foreach {[char]$_}) -join "") + "|" + (($_.SerialNumberID -notmatch 0 | foreach {[char]$_}) -join "") + "|" + $_.InstanceName}'));
+          workload.push(util.powerShell('Get-CimInstance -Namespace root\\wmi -ClassName WmiMonitorID | % { $m=($_.ManufacturerName|?{$_-ne0}|%{[char]$_})-join"";$p=($_.ProductCodeID|?{$_-ne0}|%{[char]$_})-join"";$f=($_.UserFriendlyName|?{$_-ne0}|%{[char]$_})-join"";$s=($_.SerialNumberID|?{$_-ne0}|%{[char]$_})-join"";"$m|$p|$f|$s|$($_.InstanceName)" }'));
 
           const nvidiaData = nvidiaDevices();
 
@@ -908,6 +908,7 @@ function graphics(callback) {
             });
 
             result.displays = parseLinesWindowsDisplaysPowershell(ssections, msections, dsections, tsections, isections);
+            result.monitors = parseLinesWindowsMonitorsPowershell(ssections, msections, dsections, tsections, isections);
 
             if (result.displays.length === 1) {
               if (_resolutionX) {
@@ -1125,6 +1126,67 @@ function graphics(callback) {
     }
     return displays;
   }
+
+  function parseLinesWindowsMonitorsPowershell(ssections, msections, dsections, tsections, isections) {
+    let monitors = [];
+
+    // const d = dsections.map(dsection => {
+    //   let vendor = '';
+    //   let model = '';
+    //   let deviceID = '';
+    //   let resolutionX = 0;
+    //   let resolutionY = 0;
+
+    //   if (dsection) {
+    //     const line = dsection.split('\n');
+    //     vendor = util.getValue(line, 'MonitorManufacturer', ':');
+    //     model = util.getValue(line, 'Name', ':');
+    //     deviceID = util.getValue(line, 'PNPDeviceID', ':').replace(/&amp;/g, '&').toLowerCase();
+    //     resolutionX = util.toInt(util.getValue(line, 'ScreenWidth', ':'));
+    //     resolutionY = util.toInt(util.getValue(line, 'ScreenHeight', ':'));
+    //   }
+
+    //   return {
+    //     vendor,
+    //     model,
+    //     deviceID,
+    //     resolutionX,
+    //     resolutionY
+    //   }
+    // });
+
+    const t = tsections.map(tsection => {
+      let instanceName = '';
+      let videoOutputTechnology = '';
+
+      if (tsection) {
+        const line = tsection.split('\n');
+        instanceName = util.getValue(line, 'InstanceName').toLowerCase();
+        videoOutputTechnology = util.getValue(line, 'VideoOutputTechnology');
+      }
+
+      return {
+        instanceName,
+        videoOutputTechnology
+      }
+    });
+
+    const i = isections.map(isection => {
+      const tsection = t.find(_t => _t.instanceName === isection.instanceId.toLowerCase())
+      let builtin = tsection.videoOutputTechnology === '2147483648'
+      let connection = videoTypes[tsection.videoOutputTechnology] || ''
+
+      return {
+        ...isection,
+        builtin,
+        connection
+      }
+    });
+
+    monitors = i;
+
+    return monitors;
+  }
 }
 
 exports.graphics = graphics;
diff --git a/lib/index.d.ts b/lib/index.d.ts
index e38786f42f867e47eaf7310922e9df3a7f2707cf..0d176bdeb77ede774de5916347ac38e7d23bbe19 100644
--- a/lib/index.d.ts
+++ b/lib/index.d.ts
@@ -139,6 +139,7 @@ export namespace Systeminformation {
     clockSpeed: number | null;
     formFactor: string;
     manufacturer?: string;
+    manufacturerId?: string;
     partNum: string;
     serialNum: string;
     voltageConfigured: number | null;
@@ -261,6 +262,7 @@ export namespace Systeminformation {
   }
 
   interface DiskLayoutData {
+    primary: boolean;
     device: string;
     type: string;
     name: string;
@@ -303,6 +305,7 @@ export namespace Systeminformation {
   interface GraphicsData {
     controllers: GraphicsControllerData[];
     displays: GraphicsDisplayData[];
+    monitors: GraphicsMonitorsData[];
   }
 
   interface GraphicsControllerData {
@@ -360,6 +363,16 @@ export namespace Systeminformation {
     currentRefreshRate: number | null;
   }
 
+  interface GraphicsMonitorsData {
+    instanceId: string;
+    vendor: string;
+    code: string;
+    model: string;
+    serial: string | null;
+    builtin: boolean;
+    connection: string | null;
+  }
+
   // 4. Operating System
 
   interface OsData {
diff --git a/lib/memory.js b/lib/memory.js
index 620f2d6251f49b9b4ae71417b873b84fd05bac2b..9a2a2e84d37fdc58ba5ff03a049b0a5c1db56ff5 100644
--- a/lib/memory.js
+++ b/lib/memory.js
@@ -348,6 +348,7 @@ function memLayout(callback) {
                   clockSpeed: (util.getValue(lines, 'Configured Clock Speed:') ? parseInt(util.getValue(lines, 'Configured Clock Speed:'), 10) : (util.getValue(lines, 'Speed:') ? parseInt(util.getValue(lines, 'Speed:'), 10) : null)),
                   formFactor: util.getValue(lines, 'Form Factor:'),
                   manufacturer: getManufacturer(util.getValue(lines, 'Manufacturer:')),
+                  manufacturerId: util.getValue(lines, 'Manufacturer:'),
                   partNum: util.getValue(lines, 'Part Number:'),
                   serialNum: util.getValue(lines, 'Serial Number:'),
                   voltageConfigured: parseFloat(util.getValue(lines, 'Configured Voltage:')) || null,
@@ -460,6 +461,7 @@ function memLayout(callback) {
                   clockSpeed: parseInt(util.getValue(lines, '          Speed:'), 10),
                   formFactor: '',
                   manufacturer: getManufacturer(util.getValue(lines, '          Manufacturer:')),
+                  manufacturerId: util.getValue(lines, '          Manufacturer:'),
                   partNum: util.getValue(lines, '          Part Number:'),
                   serialNum: util.getValue(lines, '          Serial Number:'),
                   voltageConfigured: null,
@@ -475,6 +477,7 @@ function memLayout(callback) {
                   clockSpeed: 0,
                   formFactor: '',
                   manufacturer: '',
+                  manufacturerId: '',
                   partNum: '',
                   serialNum: '',
                   voltageConfigured: null,
@@ -498,6 +501,7 @@ function memLayout(callback) {
                 clockSpeed: null,
                 formFactor: 'SOC',
                 manufacturer: getManufacturer(manufacturerId),
+                manufacturerId,
                 partNum: '',
                 serialNum: '',
                 voltageConfigured: null,
@@ -541,6 +545,7 @@ function memLayout(callback) {
                     clockSpeed: parseInt(util.getValue(lines, 'ConfiguredClockSpeed', ':'), 10) || parseInt(util.getValue(lines, 'Speed', ':'), 10) || 0,
                     formFactor: FormFactors[parseInt(util.getValue(lines, 'FormFactor', ':'), 10) || 0],
                     manufacturer: getManufacturer(util.getValue(lines, 'Manufacturer', ':')),
+                    manufacturerId: util.getValue(lines, 'Manufacturer', ':'),
                     partNum: util.getValue(lines, 'PartNumber', ':'),
                     serialNum: util.getValue(lines, 'SerialNumber', ':'),
                     voltageConfigured: (parseInt(util.getValue(lines, 'ConfiguredVoltage', ':'), 10) || 0) / 1000.0,
diff --git a/lib/util.js b/lib/util.js
index f3b5dd7e40e811ce848abcc0181446ad82fb10f9..e182b78b0ae45507c1316236051f35a81fae364d 100644
--- a/lib/util.js
+++ b/lib/util.js
@@ -20,6 +20,7 @@ const spawn = require('child_process').spawn;
 const exec = require('child_process').exec;
 const execSync = require('child_process').execSync;
 const util = require('util');
+const iconv = require('iconv-lite')
 
 let _platform = process.platform;
 const _linux = (_platform === 'linux' || _platform === 'android');
@@ -505,7 +506,7 @@ function powerShell(cmd) {
           }
           if (child && child.pid) {
             child.stdout.on('data', function (data) {
-              result = result + data.toString('utf8');
+              result = result + iconv.decode(data, 'GBK');
             });
             child.stderr.on('data', function () {
               child.kill();
